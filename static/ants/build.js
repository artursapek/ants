// Generated by CoffeeScript 1.3.3
(function() {
  var abs_to_relative, focus_snapped_to_now, getdata, parsePerc, update, update_focus_field;

  focus_snapped_to_now = true;

  getdata = function() {
    return $.ajax({
      type: 'GET',
      url: '/ants/update',
      dataType: 'json',
      data: {
        group: 'hearo'
      },
      success: function(data) {
        var $alley, $ant, $bottomclone, ant, id, _results;
        _results = [];
        for (id in data) {
          ant = data[id];
          if ($('#' + id).length === 0) {
            $alley = $('.alley#' + ant.name);
            $ant = $('<div class="halo"><div class="ant"></div></div>').attr({
              id: id,
              percentage: ant.percentage
            }).css({
              left: "" + ant.percentage + "%",
              top: $alley.css('top')
            });
            $bottomclone = $ant.clone();
            $.each([$ant, $bottomclone], function() {
              this.data('data', JSON.parse(ant.data));
              this.data('timestamp', ant.timestamp);
              this.data('event', ant.name);
              return this.popup();
            });
            $('.field#day').append($ant);
            $('.field#bottom').append($bottomclone);
            _results.push($bottomclone.reposition());
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    });
  };

  abs_to_relative = function(range, abs) {
    return 100 * ((abs - range[0]) / (range[1] - range[0]));
  };

  update_focus_field = function() {
    var $focus;
    $focus = $('#focus');
    return $('#focus-field').css({
      left: $focus.css('left'),
      right: $focus.css('right')
    });
  };

  update = function() {
    var $focus, focus_width, landmarks, now, perc, percentage, _i, _len, _ref;
    $focus = $('#focus');
    now = new Date();
    percentage = (((now.getHours() * 3600) + (now.getMinutes() * 60) + now.getSeconds()) / 86400) * 100;
    $('#future').css({
      left: percentage + '%'
    });
    landmarks = {
      25: '#6am',
      50: '#noon',
      75: '#6pm'
    };
    _ref = Object.keys(landmarks);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      perc = _ref[_i];
      if (percentage > perc) {
        $(landmarks[perc]).show();
      }
    }
    $('.field#bottom .halo').each(function() {
      return $(this).reposition();
    });
    if (focus_snapped_to_now) {
      focus_width = (100 - parsePerc($focus.css('right'))) - parsePerc($focus.css('left'));
      $focus.css({
        left: percentage - focus_width + '%',
        right: 100 - percentage + '%'
      });
      update_focus_field();
    }
    return getdata();
  };

  $(document).ready(function() {
    update();
    setInterval(update, 5000);
    return $('#focus, #resize-left, #resize-right').each(function() {
      return $(this).stretch();
    });
  });

  parsePerc = function(val) {
    var perc;
    perc = parseFloat(val.match(/[\d\.]+/g));
    if (val.match(/..$/g)[0] === 'px') {
      return 100 * (perc / document.width);
    }
    return perc;
  };

  (function($) {
    $.fn.stretch = function(opts) {
      var $focus, $focusfield, $future, $left, $right, $this, lastX, mdown;
      $this = $(this);
      $focus = $('#focus');
      $future = $('#future');
      $left = $('#resize-left');
      $right = $('#resize-right');
      $focusfield = $('#focus-field');
      lastX = void 0;
      mdown = false;
      $(document).mouseup(function(e) {
        mdown = false;
        $focus.removeClass('hover');
        lastX = void 0;
        return $focusfield.hide();
      }).mousemove(function(e) {
        var changeX, diff, focusleft, focusright, futureleft, id, offset, perc, updateX;
        if (!mdown) {
          return;
        }
        updateX = true;
        changeX = e.clientX - lastX;
        focusleft = parsePerc($focus.css('left'));
        focusright = parsePerc($focus.css('right'));
        futureleft = parsePerc($future.css('left'));
        perc = 100 * (changeX / $('body').width());
        id = $this.attr('id');
        if (lastX !== void 0) {
          if (id === 'resize-left') {
            $focus.animate({
              left: '+=' + perc + '%'
            }, 0);
          } else if (id === 'resize-right') {
            if (focusright - perc > (100 - futureleft) || perc < 0) {
              $focus.animate({
                right: '-=' + perc + '%'
              }, 0);
              focus_snapped_to_now = false;
            } else {
              $focus.animate({
                right: (100 - futureleft) + '%'
              }, 0);
              lastX = $future.offset().left;
              updateX = false;
              focus_snapped_to_now = true;
            }
          } else if (id === 'focus') {
            offset = $focus.offset();
            if (focusright - perc > (100 - futureleft) || perc < 0) {
              $focus.animate({
                right: '-=' + perc + '%',
                left: '+=' + perc + '%'
              }, 0);
              focus_snapped_to_now = false;
            } else if (Math.abs(parseInt(offset.left + $focus.width()) - parseInt($future.offset().left)) > 1) {
              diff = (100 - focusleft) - focusright;
              $focus.animate({
                right: 100 - futureleft + '%',
                left: futureleft - diff + '%'
              }, 0);
              lastX = e.clientX;
              updateX = false;
              focus_snapped_to_now = true;
            } else {
              focus_snapped_to_now = true;
              updateX = false;
            }
          }
        }
        if (updateX) {
          lastX = e.clientX;
          $('.field#bottom').find('.halo').each(function() {
            return $(this).reposition();
          });
        }
        return update_focus_field();
      });
      return $this.mousedown(function(e) {
        mdown = true;
        $focus.addClass('hover');
        $focusfield.show();
        return e.stopPropagation();
      });
    };
    $.fn.reposition = function() {
      var $focus, $this, abs, leftbound, relative, rightbound;
      $this = $(this);
      $focus = $('#focus');
      leftbound = parsePerc($focus.css('left'));
      rightbound = 100 - parsePerc($focus.css('right'));
      abs = parsePerc($this.attr('percentage'));
      relative = abs_to_relative([leftbound, rightbound], abs);
      return $this.css({
        left: relative + '%'
      });
    };
    return $.fn.popup = function() {
      var $popup, $this;
      $this = $(this);
      $popup = $('<div class="popup"></div>');
      $popup.append($('<div class="timestamp">' + $this.data('event') + ' - ' + $this.data('timestamp') + '</div><table class="data"></table>'));
      if ($this.data('data') !== void 0) {
        $.each($this.data('data'), function(i, val) {
          return $popup.find('table').append($('<tr><td>' + i + '</td><td>' + val.toString() + '</td></tr>'));
        });
      }
      $this.mouseover(function() {
        $popup.show();
        return $this.css('z-index', '2001');
      }).mouseout(function() {
        $popup.hide();
        return $this.css('z-index', '11');
      });
      return $popup.appendTo($this);
    };
  })(jQuery);

}).call(this);
